<div id="demo1">
    <ul class="panel-list">
        <li class="panel-item"></li>
        <li class="panel-item"></li>
        <li class="panel-item"></li>
        <li class="panel-item"></li>
        <li class="panel-item"></li>
    </ul>
    <h2>拖拽下面的方块到上面任意容器中</h2>

    <!-- 设置draggable使元素成为可拖拽元素 -->
    <span class="movable" id="demo1-src" draggable="true"></span>
</div>


#demo1 {
	margin:20px;
}
#demo1 .panel-list {
	overflow:hidden;
	list-style:none;
	margin:0;
	padding:0;
}
#demo1 .panel-item {
	float:left;
	margin-right:30px;
	width:100px;
	height:100px;
	background:#ddd;
	border:1px solid #ddd;
}
#demo1-src {
	display:inline-block;
	width:50px;
	height:50px;
	background:purple;
}
#demo1 .over {
	border:1px dashed #000;
	-webkit-transform:scale(0.8,0.8);
}



js:

(function() {

    var dnd = {
        // 初始化
        init: function() {
            var me = this;
            me.src = document.querySelector('#demo1-src');
            me.panelList = document.querySelector('.panel-list');

            // 为拖拽源监听dragstart,设置关联数据
            me.src.addEventListener('dragstart', me.onDragStart, false);

            // 拖拽鼠标移入元素,在拖放目标上设置视觉反馈
            me.panelList.addEventListener('dragenter', me.onDragEnter, false);

            // 取消元素dragover默认行为,使其可拖放
            me.panelList.addEventListener('dragover', me.onDragOver, false);

            // 拖拽移出元素,清除视觉反馈
            me.panelList.addEventListener('dragleave', me.onDragLeave, false);

            // 鼠标释放,在拖放目标上接收数据并处理
            me.panelList.addEventListener('drop', me.onDrop, false);
        },
        onDragStart: function(e) {
            console.log(e)
            e.dataTransfer.setData('text/plain', 'demo1-src');
        },
        onDragEnter: function(e) {
            if (e.target.classList.contains('panel-item')) {
                e.target.classList.add('over');
            }
        },
        onDragLeave: function(e) {
            if (e.target.classList.contains('panel-item')) {
                e.target.classList.remove('over');
            }
        },
        onDragOver: function(e) {
            e.preventDefault();
        },
        onDrop: function(e) {
            var id = e.dataTransfer.getData('text/plain');
            var src = document.getElementById(id);
            var target = e.target;
            if (target.classList.contains('panel-item')) {
                target.appendChild(src);
                target.classList.remove('over');
            }
        }

    };

    dnd.init();
}());


参数说明
DataTransfer 对象：退拽对象用来传递的媒介，使用一般为Event.dataTransfer。

draggable 属性：就是标签元素要设置draggable=true，否则不会有效果，例如：

<div title="拖拽我" draggable="true">列表1</div>
ondragstart 事件：当拖拽元素开始被拖拽的时候触发的事件，此事件作用在被拖曳元素上

ondragenter 事件：当拖曳元素进入目标元素的时候触发的事件，此事件作用在目标元素上

ondragover 事件：拖拽元素在目标元素上移动的时候触发的事件，此事件作用在目标元素上

ondrop 事件：被拖拽的元素在目标元素上同时鼠标放开触发的事件，此事件作用在目标元素上

ondragend 事件：当拖拽完成后触发的事件，此事件作用在被拖曳元素上

Event.preventDefault() 方法：阻止默认的些事件方法等执行。在ondragover中一定要执行preventDefault()，否则ondrop事件不会被触发。另外，如果是从其他应用软件或是文件中拖东西进来，尤其是图片的时候，默认的动作是显示这个图片或是相关信息，并不是真的执行drop。此时需要用用document的ondragover事件把它直接干掉。

Event.effectAllowed 属性：就是拖拽的效果。